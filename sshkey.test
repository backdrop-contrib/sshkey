<?php

/**
 * @file
 * Tests for sskey module.
 */

/**
 * Helpers for sshkey test cases.
 */
class SSHKeyTestCaseHelper extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    list($modules) = func_get_args() + array(0 => array());

    $modules[] = 'sshkey';
    parent::setUp($modules);
  }

  /**
   * Return a random valid SSH key.
   */
  public function randomSshPublicKey($type = 'ssh-rsa') {
    static $keys = [
      'ssh-rsa' => [
        // 2048 bit.
        'AAAAB3NzaC1yc2EAAAADAQABAAABAQDEp+pzR2bkbIh06m7rJ6vQViGqEsyDIUma6TsfoSxr5XC/2NhtC9gvzDRPi6wFot2vvNT8vXejf/oKxP+9HRuxoV/aLV9b0HuphW0Z7427+bwznCcY34tsQzEOs9D6PTynLQ3dzGFJr3Dq+otrhuaVv3RTbDDC0COqyiJ9JPtCkTXBAyzoHhFiGBsXaEQxcQxraSRGGUcpYkdFlxy70IFboVsK7HxMwmQiqneFo10QLkOsoUQ2YcFvgGvRy0l3I+qZ+i510socWDDO21Tud/1w9ftQiqwmng5iWVnMJZdkjmalTXCCuaKBhJEY/fZ/03xraT8vbpkJK11W+/1yVvXt',
        'AAAAB3NzaC1yc2EAAAADAQABAAABAQCWef1LUVuh09XMR8CEkeRVj53JYrQiBsm7PyKyqewgBUHLJDW3VGfuBnwgQVakq4m9Z/gEUEeQNj3yPVbxPHt0PvrCImjcOo9LwrbnOU749WT2LeE/c3LQcLJz4xNc9yWMjA+LGYQh2ytmBKMsZXbrJK925Kj9RFyWsHfT0/LsTAfjmp+7kfPotPPqyy8OcITvPDEOKtN7F/AqH1IHRAkx2DldGiA1L6Wcpu+tV9jVN+5E2zCyhOfBPhtGpDPGbeTt/kOwp4FmwmQH15i7KcFzRJosetl3y+HAthTdJbGtbebbeqBM4FT9AzA3JWa8gONCEjAQJSr/VbdXWWbULosT',
        // 3072 bit.
        'AAAAB3NzaC1yc2EAAAADAQABAAABgQCrjAKb3NrCnCpAbbq+gMpSzzY7L9r64oTBI0oBBizYVc5tI8wvxB86qf0M129sEoReA2sW7GGnNW/sLSPfS9XwZk5oJRnIEC99vhrxJtOtDJQNA8C2XpZ/p8SjAclBIpsynrRFEKbn72GWDQu1rmkhUQK+tzzRkD84mcp0au1RxjYm0XGc8aMrEf04whWX/As9VXW/vdsaK7LYZMV3+4MBhdq5XwRxAnOqj0XEUlouW9kbvmS973lP6dRIDBTt8IhS2tCqXE13yvC0cQLWgpCATii2a2xRtSV8ASHt2InNQpETQh7Dtf64JQIGIJn+qsIjD1l6C521gxfeiZGHgXoTZaHkOMCg0Sis4xCpqv4uNgXdEbUksouFSs05WjAyWodS92cVKhdzEpCJBG2U9jFE55saONwcY2PoJPB5xRqygThoCAmJU+2A7cM0udmuyy11MvdiVlKQ5eJXAFiH4ty3x/JThbQHb2+Mu0p/w407QdNXku1oEuO1CT2Cwbh8zSs=',
        'AAAAB3NzaC1yc2EAAAADAQABAAABgQDD4rso5dG+kbeClGdIwD79FDIAM3vh4SfU6XOjgjaTBKipcF+gFoQNgpb5FVU9+lGu7/iyuLE2IZM/UszZYvd6SrCdJ/P82L3tRLy9aCU+TtEuQ7NaHTwhBKvUPgZZah9/tbmJldZViQ61fmZp0p4XzLAdDoQ7/Eg+CMTeUUfEUUAaCuFYpY8bxZDAXgeLPnYmBmOHJPPJ/V8LhS83krYs7rP8agFCS9rd//ib0qZ6OTxed/YKjTvO1qvzSUwaClDvCP81P6HBvyHiM+SvA5QWDCRlkc0Q3EcXSv6lvkbD+Q9vGwBdAQz2tVTLT0exj+pkcqSxGsggTn2GcPGX9C6YmJ8QcvzDFsXKCnf1w1YupiOzp4MoQ9ddvQ+M+D7jy1nrp9KP1wy+BhFm2hK1fflqQzGDuw88NCoD06r+AhvRgyWEGreJpozR2Lz3C8H94hr9URwdj3ZlDNwMrtydoe5JG8TUlWk5mvGTxN9+qdpfNr9GpK3NHkl/RTpNPf8CBs8=',
      ],
    ];

    $key = new stdClass();
    $key_value = $keys[$type][array_rand($keys[$type])];
    $key->value = $type . ' ' . base64_encode($key_value);
    $key->fingerprint = md5($key_value);
    return $key;
  }

  /**
   * Assert that a keyâ€™s fingerprint appears.
   */
  public function assertFingerprintText($key) {
    return $this->assertText(theme('sshkey_fingerprint', array('key' => $key)));
  }

}

/**
 * Test cases for sshkey.
 */
class SSHKeyFunctionalTestCase extends SSHKeyTestCaseHelper {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'SSH key functional test',
      'description' => 'Tests generic module functionality.',
      'group' => 'SSH key',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();
    $this->normal_user = $this->drupalCreateUser([
      'view own SSH public keys',
      'edit own SSH public keys',
      'manage own SSH public keys',
      'access user profiles',
    ]);
    $this->admin_user = $this->drupalCreateUser([
      'administer users',
      'administer SSH public keys',
    ]);
  }

  /**
   * Test key create, update, delete.
   */
  public function testUserKeys() {
    $this->drupalLogin($this->normal_user);
    $this->clickLink('SSH keys');
    $this->clickLink('Add a public key');

    $edit['value'] = '';
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText('Key field is required.');

    $edit['value'] = $this->randomName();
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText('The key is invalid.');

    $edit['value'] = 'ssh-foo ' . $this->randomName();
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText('The key is invalid. It must begin with ssh-rsa, ssh-dss, or ssh-ed25519.');

    // Add a key only using its key value, so its title should then be
    // auto-generated from the key value.
    $key = $this->randomSshPublicKey();
    $key->title = substr($key->value, 0, 26);
    $edit['value'] = $key->value;
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText("The SSH public key {$key->title} has been saved.");
    $this->assertFingerprintText($key);

    // Edit the key to use a comment as the title.
    $this->clickLink('Edit', 1);
    $edit['title'] = '';
    $edit['value'] = $key->value . ' test@comment';
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText("The SSH public key test@comment has been saved.");
    $this->assertFingerprintText($key);

    // Edit the key to use a comment as the title.
    $this->clickLink('Edit', 1);
    $edit['title'] = 'Test title';
    $edit['value'] = $key->value;
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText("The SSH public key Test title has been saved.");
    $this->assertFingerprintText($key);

    // Attempt to insert a duplicate key.
    $this->clickLink('Add a public key');
    $edit['value'] = $key->value . ' duplicate@key';
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText("The public key with fingerprint {$key->fingerprint} is already in use.");
    $this->clickLink('Cancel');

    $this->clickLink('Delete');
    $this->assertText("Are you sure you want to delete the public key Test title?");
    $this->drupalPost(NULL, array(), 'Delete');
    $this->assertText("The SSH public key Test title has been deleted.");
    $this->assertNoText($key->fingerprint);

    // Check that a normal user cannot access another users's SSH key page.
    $this->drupalGet("user/{$this->admin_user->uid}/ssh-keys");
    $this->assertResponse(403);
  }

  /**
   * Test sshkey_clean_whitespace().
   */
  public function testCleanWhitespace() {
    $whitespace = "\n ";

    $key1 = $this->randomSshPublicKey()->value;
    $invalid_key1 = substr_replace($key1, $whitespace, 22, 0);
    $invalid_key1 = substr_replace($invalid_key1, $whitespace, 34, 0);
    $this->assertEqual($key1, sshkey_clean_whitespace($invalid_key1), 'Key with invalid whitespace successfully cleaned.');

    $comment = $this->randomName() . '@' . $this->randomName();
    $key2 = $this->randomSshPublicKey()->value . ' ' . $comment;
    $invalid_key2 = substr_replace($key2, $whitespace, 18, 0);
    $invalid_key2 = substr_replace($invalid_key2, $whitespace, 27, 0);
    $this->assertEqual($key2, sshkey_clean_whitespace($invalid_key2), 'Key with invalid whitespace (and comment) successfully cleaned.');
  }

}
