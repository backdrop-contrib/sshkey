<?php

/**
 * @class Helpers for sshkey test cases.
 */
class SSHKeyTestCaseHelper extends DrupalWebTestCase {

  public function setUp() {
    list($modules) = func_get_args() + array(0 => array());

    $modules[] = 'sshkey';
    parent::setUp($modules);
  }

  public function randomSSHPublicKey($type = 'ssh-rsa', $length = 276) {
    $key = new stdClass();
    $key_value = pack('N', strlen($type)) . $type . pack('N', $length);
    for ($i = 0; $i < $length; $i += 1) {
      $key_value .= chr(mt_rand(32, 122));
    }
    $key->value = $type . ' ' . base64_encode($key_value);
    $key->fingerprint = md5($key_value);
    return $key;
  }

  public function assertFingerprintText($key) {
    return $this->assertText(theme('sshkey_fingerprint', array('key' => $key)));
  }

  public function assertNoFingerprintText($key) {
    return $this->assertNoText(theme('sshkey_fingerprint', array('key' => $key)));
  }

}

/**
 * @class Test cases for sshkey.
 */
class SSHKeyFunctionalTestCase extends SSHKeyTestCaseHelper {

  public static function getInfo() {
    return array(
      'name' => 'SSH key functional test',
      'description' => 'Tests generic module functionality.',
      'group' => 'SSH key',
    );
  }

  public function setUp() {
    parent::setUp();
    $this->normal_user = $this->drupalCreateUser([
      'view own SSH public keys',
      'edit own SSH public keys',
      'manage own SSH public keys',
      'access user profiles',
    ]);
    $this->admin_user = $this->drupalCreateUser([
      'administer users',
      'administer SSH public keys',
    ]);
  }

  public function testUserKeys() {
    $this->drupalLogin($this->normal_user);
    $this->clickLink('SSH keys');
    $this->clickLink('Add a public key');

    $edit['value'] = '';
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText('Key field is required.');

    $edit['value'] = $this->randomName();
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText('The key is invalid.');

    $edit['value'] = 'ssh-foo ' . $this->randomName();
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText('The key is invalid. It must begin with ssh-rsa, ssh-dss, or ssh-ed25519.');

    // Add a key only using its key value, so its title should then be
    // auto-generated from the key value.
    $key = $this->randomSSHPublicKey();
    $key->title = substr($key->value, 0, 26);
    $edit['value'] = $key->value;
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText("The SSH public key {$key->title} has been saved.");
    $this->assertFingerprintText($key);

    // Edit the key to use a comment as the title.
    $this->clickLink('Edit', 1);
    $edit['title'] = '';
    $edit['value'] = $key->value . ' test@comment';
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText("The SSH public key test@comment has been saved.");
    $this->assertFingerprintText($key);

    // Edit the key to use a comment as the title.
    $this->clickLink('Edit', 1);
    $edit['title'] = 'Test title';
    $edit['value'] = $key->value;
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText("The SSH public key Test title has been saved.");
    $this->assertFingerprintText($key);

    // Attempt to insert a duplicate key.
    $this->clickLink('Add a public key');
    $edit['value'] = $key->value . ' duplicate@key';
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText("The public key with fingerprint {$key->fingerprint} is already in use.");
    $this->clickLink('Cancel');

    $this->clickLink('Delete');
    $this->assertText("Are you sure you want to delete the public key Test title?");
    $this->drupalPost(NULL, array(), 'Delete');
    $this->assertText("The SSH public key Test title has been deleted.");
    $this->assertNoText($key->fingerprint);

    // Check that a normal user cannot access another users's SSH key page.
    $this->drupalGet("user/{$this->admin_user->uid}/ssh-keys");
    $this->assertResponse(403);
  }

  public function testCleanWhitespace() {
    $whitespace = "\n ";

    $key1 = $this->randomSSHPublicKey()->value;
    $invalid_key1 = substr_replace($key1, $whitespace, 22, 0);
    $invalid_key1 = substr_replace($invalid_key1, $whitespace, 34, 0);
    $this->assertEqual($key1, sshkey_clean_whitespace($invalid_key1), 'Key with invalid whitespace successfully cleaned.');

    $comment = $this->randomName() . '@' . $this->randomName();
    $key2 = $this->randomSSHPublicKey()->value . ' ' . $comment;
    $invalid_key2 = substr_replace($key2, $whitespace, 18, 0);
    $invalid_key2 = substr_replace($invalid_key2, $whitespace, 27, 0);
    $this->assertEqual($key2, sshkey_clean_whitespace($invalid_key2), 'Key with invalid whitespace (and comment) successfully cleaned.');
  }

}
